[
  {
    "objectID": "posts/World Happiness Index/index.html",
    "href": "posts/World Happiness Index/index.html",
    "title": "Analysis of driving factors of the 2024 Global Happiness Index",
    "section": "",
    "text": "Research objectives :\n\nVisualize the regional distribution of happiness index of each country.\nExplore the impact of GDP, social support, and healthy life expectancy on happiness index.\nUse multiple linear regression model to evaluate the main influencing factors.\n\n\n# Load necessary libraries\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(conflicted)\nlibrary(sf)\n\nWarning: 程序包'sf'是用R版本4.4.2 来建造的\n\n\nLinking to GEOS 3.12.2, GDAL 3.9.3, PROJ 9.4.1; sf_use_s2() is TRUE\n\nlibrary(rnaturalearth)\n\nWarning: 程序包'rnaturalearth'是用R版本4.4.2 来建造的\n\nlibrary(rnaturalearthdata)\n\nWarning: 程序包'rnaturalearthdata'是用R版本4.4.2 来建造的\n\nconflict_prefer(\"filter\", \"dplyr\")\n\n[conflicted] Will prefer dplyr::filter over any other package.\n\nconflict_prefer(\"lag\", \"dplyr\")\n\n[conflicted] Will prefer dplyr::lag over any other package.\n\n\nData source:\nThe dataset comes from: Kaggle - World Happiness Report 2024\n\n# Load data\nhappiness_data &lt;- read.csv(\"data/World-happiness-report-2024.csv\")\n\n# Show data structure\nstr(happiness_data)\n\n'data.frame':   143 obs. of  12 variables:\n $ Country.name                : chr  \"Finland\" \"Denmark\" \"Iceland\" \"Sweden\" ...\n $ Regional.indicator          : chr  \"Western Europe\" \"Western Europe\" \"Western Europe\" \"Western Europe\" ...\n $ Ladder.score                : num  7.74 7.58 7.53 7.34 7.34 ...\n $ upperwhisker                : num  7.82 7.66 7.62 7.42 7.41 ...\n $ lowerwhisker                : num  7.67 7.5 7.43 7.27 7.28 ...\n $ Log.GDP.per.capita          : num  1.84 1.91 1.88 1.88 1.8 ...\n $ Social.support              : num  1.57 1.52 1.62 1.5 1.51 ...\n $ Healthy.life.expectancy     : num  0.695 0.699 0.718 0.724 0.74 0.706 0.704 0.708 0.747 0.692 ...\n $ Freedom.to.make.life.choices: num  0.859 0.823 0.819 0.838 0.641 0.725 0.835 0.801 0.759 0.756 ...\n $ Generosity                  : num  0.142 0.204 0.258 0.221 0.153 0.247 0.224 0.146 0.173 0.225 ...\n $ Perceptions.of.corruption   : num  0.546 0.548 0.182 0.524 0.193 0.372 0.484 0.432 0.498 0.323 ...\n $ Dystopia.residual           : num  2.08 1.88 2.05 1.66 2.3 ...\n\n\n\n# Data cleaning: Select relevant variables and check for missing values\nhappiness_clean &lt;- happiness_data %&gt;%\n  select(Country.name, Regional.indicator, Ladder.score, Log.GDP.per.capita, Social.support, Healthy.life.expectancy,Freedom.to.make.life.choices, Generosity, Perceptions.of.corruption,Dystopia.residual) %&gt;%\n  drop_na() %&gt;%\n  rename(\n    Country = Country.name,                \n    Region = Regional.indicator,                  \n    Happiness_Score = Ladder.score, \n    GDP_Per_Capita = Log.GDP.per.capita,  \n    Social_Support = Social.support,   \n    Life_Expectancy = Healthy.life.expectancy,\n    Freedom = Freedom.to.make.life.choices,\n    Generosity = Generosity,\n    Perceptions = Perceptions.of.corruption,\n    Dystopia = Dystopia.residual\n  )\n\nVisualizing the global distribution of happiness index\n\n# Mapping the regional distribution of happiness index\nhappiness_clean %&gt;%\n  group_by(Region) %&gt;%\n  summarise(Average_Score = mean(Happiness_Score)) %&gt;%\n  ggplot(aes(x = reorder(Region, -Average_Score), y = Average_Score, fill = Region)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"Average happiness index of different regions in the world\",\n       x = \"area\",\n       y = \"Average happiness index\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nIn terms of regional distribution, the average happiness index in Northern Europe is the highest, while the happiness index in Sub-Saharan Africa is the lowest.\n–\nCorrelation between the analysis index and happiness scores\n\n# Remove the column named \"Country\" and \"Region\"\nhappiness_clean_new &lt;- happiness_clean %&gt;%\n  select(-Country, -Region)\n\n# Calculate the correlation matrix\ncorrelation_matrix &lt;- cor(happiness_clean_new, use = \"complete.obs\")\n\n# Calculate the correlation matrix\ncorrelation_with_happiness &lt;- correlation_matrix[\"Happiness_Score\", ]\ncorrelation_with_happiness\n\nHappiness_Score  GDP_Per_Capita  Social_Support Life_Expectancy         Freedom \n      1.0000000       0.7685037       0.8135420       0.7596594       0.6444511 \n     Generosity     Perceptions        Dystopia \n      0.1300382       0.4518290       0.5335424 \n\n# Convert to data frame\ncorrelations &lt;- as.data.frame(correlation_with_happiness) %&gt;%\n  rownames_to_column(\"Parameter\") %&gt;%\n  rename(Correlation = \"correlation_with_happiness\") %&gt;%\n  filter(Parameter != \"Ladder.score\")  # 排除自身\n\n# Plot a correlation bar chart\nggplot(correlations, aes(x = reorder(Parameter, Correlation), y = Correlation, fill = Correlation)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"Correlation analysis of parameters with happiness index\",\n       x = \"parameter\",\n       y = \"Correlation\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nResult analysis\nParameters with strong correlation:\n\nGDP.per.capita\nSocial.support\nHealthy.life.expectancy\n\n–\nFocus on analyzing the impact of these three indicators on the happiness index\nMultiple regression analysis\n\n# Building a multiple linear regression model\nmodel &lt;- lm(Happiness_Score ~ GDP_Per_Capita + Social_Support + Life_Expectancy, \n            data = happiness_clean)\n\n# Model Summary\nsummary(model)\n\n\nCall:\nlm(formula = Happiness_Score ~ GDP_Per_Capita + Social_Support + \n    Life_Expectancy, data = happiness_clean)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.91136 -0.31085  0.01014  0.40511  1.26989 \n\nCoefficients:\n                Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)       1.8552     0.1922   9.655  &lt; 2e-16 ***\nGDP_Per_Capita    0.6186     0.2316   2.671  0.00849 ** \nSocial_Support    1.7383     0.2328   7.467 8.91e-12 ***\nLife_Expectancy   1.6336     0.5798   2.818  0.00556 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.6049 on 136 degrees of freedom\nMultiple R-squared:  0.7434,    Adjusted R-squared:  0.7377 \nF-statistic: 131.3 on 3 and 136 DF,  p-value: &lt; 2.2e-16\n\n\nImportance Analysis and Visualization\n\n# Extract regression coefficients\nimportance &lt;- summary(model)$coefficients %&gt;%\n  as.data.frame() %&gt;%\n  rownames_to_column(\"Feature\") %&gt;%\n  filter(Feature != \"(Intercept)\")\n\n# Plot feature importance\nggplot(importance, aes(x = reorder(Feature, Estimate), y = Estimate)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  coord_flip() +\n  labs(title = \"Key factors affecting happiness index\",\n       x = \"Influencing factors\",\n       y = \"Regression coefficient\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n# Plot GDP against happiness index\nggplot(happiness_clean, aes(x = GDP_Per_Capita , y = Happiness_Score )) +\n  geom_point(aes(color = Region), alpha = 0.7) +\n  geom_smooth(method = \"lm\", color = \"blue\") +\n  labs(title = \"The relationship between GDP and happiness index\",\n       x = \"GDP\",\n       y = \"Happiness Index\") +\n  theme_minimal()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n# Plot the relationship between Social_Support and happiness index\nggplot(happiness_clean, aes(x = Social_Support , y = Happiness_Score )) +\n  geom_point(color = \"blue\", alpha = 0.6) + \n  geom_smooth(method = \"lm\", color = \"red\", linetype = \"dashed\") + \n  labs(\n    title = \"The relationship between social support and happiness index\",\n    x = \"Social Support\",\n    y = \"Happiness Score\"\n  ) +\n  theme_minimal()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n# Plot Life_Expectancy vs. Happiness Index\nggplot(happiness_clean, aes(x = Life_Expectancy, y = Happiness_Score)) +\n  geom_point(color = \"green\", alpha = 0.6) + \n  geom_smooth(method = \"lm\", color = \"red\", linetype = \"dashed\") + \n  labs(\n    title = \"The relationship between life expectancy and happiness index\",\n    x = \"Life Expectancy (Healthy)\",\n    y = \"Happiness Score\"\n  ) +\n  theme_minimal()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nConclusion:\nCountries with higher GDP generally have higher happiness indexes, but in some cases there may be diminishing marginal effects (i.e., the improvement in happiness index becomes smaller as GDP increases to a certain level).Developed regions (such as Northern Europe) may exhibit high GDP and high happiness index. Developing regions may show lower GDP and happiness indices. While GDP is an important factor in happiness, non-economic indicators (e.g. social support, healthy life expectancy) may contribute even more to the happiness index.\nHigh social support (such as having more support from family and friends) significantly increases happiness index. The role of social support may be related to cultural and economic conditions, such as: Nordic countries generally have high social support and high happiness scores. Economically underdeveloped areas may have lower social support and lower happiness indexes.\nHealthy life expectancy (Life_Expectancy) is an important determinant of happiness index. Good health and longevity are important sources of happiness. In some developed countries, healthy life expectancy is higher and the happiness index is also high (such as Europe and North America). For countries with low healthy life expectancy (such as some developing countries), happiness may be affected by inadequate medical care and quality of life.\nGovernments and institutions can focus on improving public health and social support systems to increase overall well-being."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "hw3_JintaoCao123",
    "section": "",
    "text": "Analysis of driving factors of the 2024 Global Happiness Index\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nDec 10, 2024\n\n\nJintao\n\n\n\n\n\n\n\n\n\n\n\n\nPredicting Body Fat Percentage in Adult Males Using Multiple Regression\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\nprediction\n\n\n\n\n\n\n\n\n\nDec 8, 2024\n\n\nJintao Cao\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Hello and welcome to my blog!\nWho I Am\nMy name is Jintao Cao, and I’m someone who loves exploring, creating, and sharing ideas. Whether it’s diving into data, discovering new places, or writing about my experiences, I find joy in bringing insights to life. My personal motto is: “Every challenge is an opportunity to learn.”\nMy Interests and Hobbies\n\nData Science and Programming I’m deeply passionate about solving problems with data. From building complex machine learning models to crafting insightful visualizations with Python and R, I enjoy turning raw data into actionable knowledge.\nReading and Writing Writing is my creative outlet, and reading is my way to learn and expand my perspective. I enjoy diving into books of all genres, whether it’s science, history, fiction, or philosophy.\nTravel and Photography Exploring new places and capturing moments with my camera are among my favorite things to do. For me, travel is not just about visiting destinations—it’s about the stories and inspiration I find along the way.\nCooking and Food The kitchen is my creative playground. I love experimenting with recipes from different cuisines and believe that good food is a universal language that brings people together.\n\nEducation\nMaster’s Degree in Information Systems Management\nUniversity of Illinois Urbana-Champaign (Aug 2023 - Dec 2024)\nBachelor’s Degree in Computer Science\nMiami University (Aug 2018 - May 2023)\n\nTechnical Skills\n\nProficient in programming languages: Java, Python, SQL, R, and web development tools (JavaScript, CSS, HTML, React).\nExpertise in data visualization tools: Tableau, Power BI, and R Studio.\nExperienced with big data frameworks: Hadoop, MapReduce.\nFamiliar with AI frameworks: TensorFlow and neural network architectures (e.g., LeNet-5, EfficientNet).\n\nThis blog is where I share my journey, thoughts, and creations. Thank you for stopping by, and I hope you find something here that inspires you!"
  },
  {
    "objectID": "posts/Bodyfat_prediction/index.html",
    "href": "posts/Bodyfat_prediction/index.html",
    "title": "Predicting Body Fat Percentage in Adult Males Using Multiple Regression",
    "section": "",
    "text": "Research objectives :\n\nA multiple regression model was constructed to predict body fat percentage in adult men.\nCompare the difference between the model predictions and the results calculated by the formula provided by Siri (1956).\nExplore which features have a significant impact on body fat percentage prediction.\n\n\n# Load necessary libraries\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\nlibrary(caret)\n\nWarning: 程序包'caret'是用R版本4.4.2 来建造的\n\n\n载入需要的程序包：lattice\n\n载入程序包：'caret'\n\nThe following object is masked from 'package:purrr':\n\n    lift\n\n\nData source:\nThe dataset comes from: Kaggle - Body Fat Prediction Datase\n\n# Load the dataset\nbody_fat_data &lt;- read.csv(\"data/bodyfat.csv\")\n\n# Show data structure and overview\nstr(body_fat_data)\n\n'data.frame':   252 obs. of  15 variables:\n $ Density: num  1.07 1.09 1.04 1.08 1.03 ...\n $ BodyFat: num  12.3 6.1 25.3 10.4 28.7 20.9 19.2 12.4 4.1 11.7 ...\n $ Age    : int  23 22 22 26 24 24 26 25 25 23 ...\n $ Weight : num  154 173 154 185 184 ...\n $ Height : num  67.8 72.2 66.2 72.2 71.2 ...\n $ Neck   : num  36.2 38.5 34 37.4 34.4 39 36.4 37.8 38.1 42.1 ...\n $ Chest  : num  93.1 93.6 95.8 101.8 97.3 ...\n $ Abdomen: num  85.2 83 87.9 86.4 100 94.4 90.7 88.5 82.5 88.6 ...\n $ Hip    : num  94.5 98.7 99.2 101.2 101.9 ...\n $ Thigh  : num  59 58.7 59.6 60.1 63.2 66 58.4 60 62.9 63.1 ...\n $ Knee   : num  37.3 37.3 38.9 37.3 42.2 42 38.3 39.4 38.3 41.7 ...\n $ Ankle  : num  21.9 23.4 24 22.8 24 25.6 22.9 23.2 23.8 25 ...\n $ Biceps : num  32 30.5 28.8 32.4 32.2 35.7 31.9 30.5 35.9 35.6 ...\n $ Forearm: num  27.4 28.9 25.2 29.4 27.7 30.6 27.8 29 31.1 30 ...\n $ Wrist  : num  17.1 18.2 16.6 18.2 17.7 18.8 17.7 18.8 18.2 19.2 ...\n\nsummary(body_fat_data)\n\n    Density         BodyFat           Age            Weight     \n Min.   :0.995   Min.   : 0.00   Min.   :22.00   Min.   :118.5  \n 1st Qu.:1.041   1st Qu.:12.47   1st Qu.:35.75   1st Qu.:159.0  \n Median :1.055   Median :19.20   Median :43.00   Median :176.5  \n Mean   :1.056   Mean   :19.15   Mean   :44.88   Mean   :178.9  \n 3rd Qu.:1.070   3rd Qu.:25.30   3rd Qu.:54.00   3rd Qu.:197.0  \n Max.   :1.109   Max.   :47.50   Max.   :81.00   Max.   :363.1  \n     Height           Neck           Chest           Abdomen      \n Min.   :29.50   Min.   :31.10   Min.   : 79.30   Min.   : 69.40  \n 1st Qu.:68.25   1st Qu.:36.40   1st Qu.: 94.35   1st Qu.: 84.58  \n Median :70.00   Median :38.00   Median : 99.65   Median : 90.95  \n Mean   :70.15   Mean   :37.99   Mean   :100.82   Mean   : 92.56  \n 3rd Qu.:72.25   3rd Qu.:39.42   3rd Qu.:105.38   3rd Qu.: 99.33  \n Max.   :77.75   Max.   :51.20   Max.   :136.20   Max.   :148.10  \n      Hip            Thigh            Knee           Ankle          Biceps     \n Min.   : 85.0   Min.   :47.20   Min.   :33.00   Min.   :19.1   Min.   :24.80  \n 1st Qu.: 95.5   1st Qu.:56.00   1st Qu.:36.98   1st Qu.:22.0   1st Qu.:30.20  \n Median : 99.3   Median :59.00   Median :38.50   Median :22.8   Median :32.05  \n Mean   : 99.9   Mean   :59.41   Mean   :38.59   Mean   :23.1   Mean   :32.27  \n 3rd Qu.:103.5   3rd Qu.:62.35   3rd Qu.:39.92   3rd Qu.:24.0   3rd Qu.:34.33  \n Max.   :147.7   Max.   :87.30   Max.   :49.10   Max.   :33.9   Max.   :45.00  \n    Forearm          Wrist      \n Min.   :21.00   Min.   :15.80  \n 1st Qu.:27.30   1st Qu.:17.60  \n Median :28.70   Median :18.30  \n Mean   :28.66   Mean   :18.23  \n 3rd Qu.:30.00   3rd Qu.:18.80  \n Max.   :34.90   Max.   :21.40  \n\n# Data cleaning\n# Filter unreasonable body fat percentage, height and weight\nbody_fat_data &lt;- body_fat_data %&gt;%\n  filter(BodyFat &gt;= 0 & Height &gt; 0 & Weight &gt; 0)\n\n\n\n\n\n\n\n\nColumn Name\nDescription\n\n\n\n\nDensity\nBody density, a key metric used in the Siri formula to calculate body fat percentage.\n\n\nBodyFat\nThe actual measured body fat percentage calculated using the “Siri Equation”.\n\n\nAge\nAge of the subject (in years).\n\n\nWeight\nWeight of the subject (in pounds).\n\n\nHeight\nHeight of the subject (in inches).\n\n\nNeck\nNeck circumference (in centimeters).\n\n\nChest\nChest circumference (in centimeters).\n\n\nAbdomen\nAbdomen circumference (in centimeters), strongly correlated with body fat percentage.\n\n\nHip\nHip circumference (in centimeters).\n\n\nThigh\nThigh circumference (in centimeters).\n\n\nKnee\nKnee circumference (in centimeters).\n\n\nAnkle\nAnkle circumference (in centimeters).\n\n\nBiceps\nBiceps circumference (in centimeters), measured in a relaxed state.\n\n\nForearm\nForearm circumference (in centimeters).\n\n\nWrist\nWrist circumference (in centimeters).\n\n\n\nBody density calculation formula:\nthe body consists of two components - lean body tissue and fat tissue. Letting:\n\nD = Body Density (gm/cm^3)\nA = proportion of lean body tissue\nB = proportion of fat tissue\nA + B = 1\na = density of lean body tissue (gm/cm^3) = 1.10 gm/cm^3\nb = density of fat tissue (gm/cm^3) = 0.90 gm/cm^3\nD = 1/[(A/a) + (B/b)]\n\nThe above equation shows that the body density calculation formula of human body is:\nD = 1/{B/[ab/(a-b)] - [b/(a-b)]}\nSiri Equation :\nBodyFat%=(Density/495)−450\nBy combining these two formulas, we can accurately get the body fat percentage of the human body.\nHowever, in daily life, we cannot easily know the proportion of fat tissue of an individual. Therefore, I try to predict the body fat percentage of an individual through the body’s physical index data, such as (weight, height, waist circumference and other easily measurable indicators).\n\nConstruct a multiple regression model to predict the body fat percentage of adult men and conduct predictive analysis.\n\n\n# The data is divided into training set and test set\nset.seed(123)\ntrain_index &lt;- createDataPartition(body_fat_data$BodyFat, p = 0.8, list = FALSE)\ntrain_data &lt;- body_fat_data[train_index, ]\ntest_data &lt;- body_fat_data[-train_index, ]\n\n# Build a multiple linear regression model\nmodel &lt;- lm(BodyFat ~ Age + Weight + Height + Neck + Chest + Abdomen + Hip + Thigh + Knee + Ankle + Biceps + Forearm + Wrist, \n            data = train_data)\n\n# Show Model Summary\nsummary(model)\n\n\nCall:\nlm(formula = BodyFat ~ Age + Weight + Height + Neck + Chest + \n    Abdomen + Hip + Thigh + Knee + Ankle + Biceps + Forearm + \n    Wrist, data = train_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-9.2586 -3.1125 -0.4363  3.2185  9.8101 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -3.894692  19.319844  -0.202  0.84045    \nAge          0.048871   0.035688   1.369  0.17250    \nWeight      -0.074466   0.057483  -1.295  0.19674    \nHeight      -0.106533   0.099523  -1.070  0.28578    \nNeck        -0.506772   0.254816  -1.989  0.04816 *  \nChest       -0.070895   0.113980  -0.622  0.53469    \nAbdomen      1.030774   0.095086  10.840  &lt; 2e-16 ***\nHip         -0.274507   0.160023  -1.715  0.08790 .  \nThigh        0.123006   0.163693   0.751  0.45332    \nKnee         0.005118   0.268428   0.019  0.98481    \nAnkle        0.228328   0.235083   0.971  0.33265    \nBiceps       0.284371   0.187770   1.514  0.13157    \nForearm      0.367860   0.210140   1.751  0.08164 .  \nWrist       -1.779157   0.612909  -2.903  0.00414 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.334 on 190 degrees of freedom\nMultiple R-squared:  0.7511,    Adjusted R-squared:  0.7341 \nF-statistic: 44.12 on 13 and 190 DF,  p-value: &lt; 2.2e-16\n\n# Make predictions on the test set\ntest_data$Predicted_BodyFat &lt;- predict(model, newdata = test_data)\n\n# Show some prediction results\nhead(test_data)\n\n   Density BodyFat Age Weight Height Neck Chest Abdomen   Hip Thigh Knee Ankle\n7   1.0549    19.2  26 181.00  69.75 36.4 105.1    90.7 100.3  58.4 38.3  22.9\n8   1.0704    12.4  25 176.00  72.50 37.8  99.6    88.5  97.1  60.0 39.4  23.2\n13  1.0513    20.8  32 180.50  69.50 38.4 102.0    91.6 103.9  63.4 38.3  21.5\n29  1.0910     3.7  27 133.25  64.75 36.4  93.5    73.9  88.5  50.1 34.5  21.3\n37  1.0438    24.2  40 202.25  70.00 38.5 106.5   100.9 106.2  63.5 39.9  22.6\n38  1.0346    28.4  50 196.75  68.25 42.1 105.6    98.8 104.8  66.0 41.5  24.7\n   Biceps Forearm Wrist Predicted_BodyFat\n7    31.9    27.8  17.7          16.94264\n8    30.5    29.0  18.8          13.62147\n13   32.5    28.6  17.7          17.20571\n29   30.5    27.9  17.2           6.94700\n37   35.1    30.6  19.0          23.94273\n38   33.2    30.5  19.4          20.99298\n\n\n\n# Scatter plot for Actual vs Predicted\nggplot(test_data, aes(x = BodyFat, y = Predicted_BodyFat)) +\n  geom_point(color = \"blue\", alpha = 0.6) +\n  geom_abline(slope = 1, intercept = 0, color = \"red\", linetype = \"dashed\") +\n  labs(title = \"Actual vs Predicted Body Fat\",\n       x = \"Actual Body Fat (%)\",\n       y = \"Predicted Body Fat (%)\") +\n  theme_minimal()\n\n\n\n\n\n\n\n# Calculate MSE and MAE\nmse &lt;- mean((test_data$BodyFat - test_data$Predicted_BodyFat)^2)\nmae &lt;- mean(abs(test_data$BodyFat - test_data$Predicted_BodyFat))\n\n# Print error metrics\ncat(\"Mean Squared Error (MSE):\", mse, \"\\n\")\n\nMean Squared Error (MSE): 18.72915 \n\ncat(\"Mean Absolute Error (MAE):\", mae, \"\\n\")\n\nMean Absolute Error (MAE): 3.441033 \n\n# Reshape data for box plot\ncomparison &lt;- test_data %&gt;%\n  select(BodyFat, Predicted_BodyFat) %&gt;%\n  pivot_longer(cols = c(BodyFat, Predicted_BodyFat),\n               names_to = \"Method\",\n               values_to = \"BodyFat\")\n\n# Box plot comparison\nggplot(comparison, aes(x = Method, y = BodyFat, fill = Method)) +\n  geom_boxplot() +\n  labs(title = \"Distribution of Actual and Predicted Body Fat\",\n       x = \"Method\",\n       y = \"Body Fat (%)\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nThe data or visual analysis reports show that there are differences in the predictions.\nThinking: Not all body indicators in the data set are related to body fat percentage. Calculate the impact of body indicators on body fat percentage.\n\n# Calculate the impact of important characteristics on body fat percentage\nimportance &lt;- varImp(model, scale = FALSE)\n\n# Display feature importance\nimportance %&gt;%\n  as.data.frame() %&gt;%\n  rownames_to_column(\"Feature\") %&gt;%\n  ggplot(aes(x = reorder(Feature, Overall), y = Overall)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  coord_flip() +\n  labs(title = \"Feature Importance\", \n       x = \"Feature\", \n       y = \"Importance score\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nAbdomen, chest, neck, forearm, hip and biceps are the most influential in predicting body fat percentage.\nUse these 6 body indicators to build a multiple linear regression model\n\n# Extract the top six features with the highest importance scores\ntop_features &lt;- c(\"Abdomen\", \"Wrist\", \"Neck\", \"Forearm\", \"Hip\", \"Biceps\")\n\n# Build a new model\nnew_model &lt;- lm(BodyFat ~ Abdomen + Wrist + Neck + Forearm + Hip + Biceps, data = train_data)\n\n# Show new model summary\nsummary(new_model)\n\n\nCall:\nlm(formula = BodyFat ~ Abdomen + Wrist + Neck + Forearm + Hip + \n    Biceps, data = train_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-9.2667 -3.1079 -0.4602  2.9265 11.0899 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 13.27239    7.46391   1.778 0.076912 .  \nAbdomen      1.02298    0.06099  16.773  &lt; 2e-16 ***\nWrist       -1.85079    0.52519  -3.524 0.000528 ***\nNeck        -0.70250    0.23913  -2.938 0.003701 ** \nForearm      0.25447    0.20616   1.234 0.218545    \nHip         -0.42451    0.09510  -4.464 1.35e-05 ***\nBiceps       0.21006    0.17402   1.207 0.228835    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.386 on 197 degrees of freedom\nMultiple R-squared:  0.7358,    Adjusted R-squared:  0.7277 \nF-statistic: 91.43 on 6 and 197 DF,  p-value: &lt; 2.2e-16\n\n# Make predictions on the test set\ntest_data$Predicted_BodyFat_New &lt;- predict(new_model, newdata = test_data)\n\n\n# Scatter plot: actual values ​​vs new predicted values\nggplot(test_data, aes(x = BodyFat, y = Predicted_BodyFat_New)) +\n  geom_point(color = \"blue\", alpha = 0.6) +\n  geom_abline(slope = 1, intercept = 0, color = \"red\", linetype = \"dashed\") +\n  labs(title = \"Actual value vs new predicted value (first six feature model\",\n       x = \"Actual Body Fat (%)\",\n       y = \"Predicted Body Fat (%)\") +\n  theme_minimal()\n\n\n\n\n\n\n\n# Box plot: Comparison of actual value and new predicted value distribution\ncomparison_new &lt;- test_data %&gt;%\n  select(BodyFat, Predicted_BodyFat_New) %&gt;%\n  pivot_longer(cols = c(BodyFat, Predicted_BodyFat_New),\n               names_to = \"Method\",\n               values_to = \"BodyFat\")\n\nggplot(comparison_new, aes(x = Method, y = BodyFat, fill = Method)) +\n  geom_boxplot() +\n  labs(title = \"Distribution of Actual and Predicted Body Fat\",\n       x = \"method\",\n       y = \"Body fat (%)\") +\n  theme_minimal()\n\n\n\n\n\n\n\n# Calculation error index\nmse_new &lt;- mean((test_data$BodyFat - test_data$Predicted_BodyFat_New)^2)\nmae_new &lt;- mean(abs(test_data$BodyFat - test_data$Predicted_BodyFat_New))\n\n# Printing error index\ncat(\"Mean Squared Error (MSE):\", mse_new, \"\\n\")\n\nMean Squared Error (MSE): 19.98987 \n\ncat(\"Mean Absolute Error (MAE):\", mae_new, \"\\n\")\n\nMean Absolute Error (MAE): 3.533513 \n\n\nConclusion:\nCompare the MSE and MAE of the two comparative analyses. The second prediction has a higher error. Therefore, the conclusion is that the second analysis method failed. More analysis directions are needed in the future to determine how to accurately analyze body fat percentage with the same body indicators."
  }
]